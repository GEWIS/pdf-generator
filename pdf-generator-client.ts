//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "/pdf";
    }

    /**
     * @return Ok
     */
    generateFineReport(body: FineRouteParams): Promise<FileResponse> {
        let url_ = this.baseUrl + "/report/fines";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/pdf+tex"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenerateFineReport(_response);
        });
    }

    protected processGenerateFineReport(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = ValidateErrorJSON.fromJS(resultData422);
            return throwException("Validation Failed", status, _responseText, _headers, result422);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = InternalError.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * @return Ok
     */
    generatePayout(body: PayoutRouteParams): Promise<FileResponse> {
        let url_ = this.baseUrl + "/payout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/pdf+tex"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGeneratePayout(_response);
        });
    }

    protected processGeneratePayout(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = ValidateErrorJSON.fromJS(resultData422);
            return throwException("Validation Failed", status, _responseText, _headers, result422);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = InternalError.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * @return Ok
     */
    generateContract(type: ContractType, body: ContractRouteParams): Promise<FileResponse> {
        let url_ = this.baseUrl + "/contract/{type}";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/pdf+tex"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenerateContract(_response);
        });
    }

    protected processGenerateContract(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = ValidateErrorJSON.fromJS(resultData422);
            return throwException("Validation Failed", status, _responseText, _headers, result422);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = InternalError.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * @return Ok
     */
    generateInvoice(type: InvoiceType, body: InvoiceRouteParams): Promise<FileResponse> {
        let url_ = this.baseUrl + "/invoice/{type}";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/pdf+tex"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenerateInvoice(_response);
        });
    }

    protected processGenerateInvoice(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = ValidateErrorJSON.fromJS(resultData422);
            return throwException("Validation Failed", status, _responseText, _headers, result422);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = InternalError.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class ValidateErrorJSON implements IValidateErrorJSON {
    message!: ValidateErrorJSONMessage;
    details!: { [key: string]: any; };

    constructor(data?: IValidateErrorJSON) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.details = {};
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (_data["details"]) {
                this.details = {} as any;
                for (let key in _data["details"]) {
                    if (_data["details"].hasOwnProperty(key))
                        (<any>this.details)![key] = _data["details"][key];
                }
            }
        }
    }

    static fromJS(data: any): ValidateErrorJSON {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateErrorJSON();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (this.details) {
            data["details"] = {};
            for (let key in this.details) {
                if (this.details.hasOwnProperty(key))
                    (<any>data["details"])[key] = (<any>this.details)[key];
            }
        }
        return data;
    }
}

export interface IValidateErrorJSON {
    message: ValidateErrorJSONMessage;
    details: { [key: string]: any; };
}

export class InternalError implements IInternalError {
    message!: InternalErrorMessage;

    constructor(data?: IInternalError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): InternalError {
        data = typeof data === 'object' ? data : {};
        let result = new InternalError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data;
    }
}

export interface IInternalError {
    message: InternalErrorMessage;
}

export enum VAT {
    ZERO = "ZERO",
    LOW = "LOW",
    HIGH = "HIGH",
}

export class ProductPricing implements IProductPricing {
    basePrice!: number;
    discount?: number;
    vatAmount!: number;
    vatCategory!: VAT;
    quantity!: number;

    constructor(data?: IProductPricing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.basePrice = _data["basePrice"];
            this.discount = _data["discount"];
            this.vatAmount = _data["vatAmount"];
            this.vatCategory = _data["vatCategory"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): ProductPricing {
        data = typeof data === 'object' ? data : {};
        let result = new ProductPricing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["basePrice"] = this.basePrice;
        data["discount"] = this.discount;
        data["vatAmount"] = this.vatAmount;
        data["vatCategory"] = this.vatCategory;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface IProductPricing {
    basePrice: number;
    discount?: number;
    vatAmount: number;
    vatCategory: VAT;
    quantity: number;
}

export class Product implements IProduct {
    name!: string;
    details?: string;
    summary!: string;
    specification?: string;
    pricing!: ProductPricing;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pricing = new ProductPricing();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.details = _data["details"];
            this.summary = _data["summary"];
            this.specification = _data["specification"];
            this.pricing = _data["pricing"] ? ProductPricing.fromJS(_data["pricing"]) : new ProductPricing();
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["details"] = this.details;
        data["summary"] = this.summary;
        data["specification"] = this.specification;
        data["pricing"] = this.pricing ? this.pricing.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProduct {
    name: string;
    details?: string;
    summary: string;
    specification?: string;
    pricing: ProductPricing;
}

export class TotalPricing implements ITotalPricing {
    exclVat!: number;
    lowVat!: number;
    highVat!: number;
    inclVat!: number;

    constructor(data?: ITotalPricing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exclVat = _data["exclVat"];
            this.lowVat = _data["lowVat"];
            this.highVat = _data["highVat"];
            this.inclVat = _data["inclVat"];
        }
    }

    static fromJS(data: any): TotalPricing {
        data = typeof data === 'object' ? data : {};
        let result = new TotalPricing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exclVat"] = this.exclVat;
        data["lowVat"] = this.lowVat;
        data["highVat"] = this.highVat;
        data["inclVat"] = this.inclVat;
        return data;
    }
}

export interface ITotalPricing {
    exclVat: number;
    lowVat: number;
    highVat: number;
    inclVat: number;
}

export class FineReportParameters implements IFineReportParameters {
    startDate!: Date;
    endDate!: Date;
    fines!: Product[];
    total!: TotalPricing;

    constructor(data?: IFineReportParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.fines = [];
            this.total = new TotalPricing();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["fines"])) {
                this.fines = [] as any;
                for (let item of _data["fines"])
                    this.fines!.push(Product.fromJS(item));
            }
            this.total = _data["total"] ? TotalPricing.fromJS(_data["total"]) : new TotalPricing();
        }
    }

    static fromJS(data: any): FineReportParameters {
        data = typeof data === 'object' ? data : {};
        let result = new FineReportParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        if (Array.isArray(this.fines)) {
            data["fines"] = [];
            for (let item of this.fines)
                data["fines"].push(item.toJSON());
        }
        data["total"] = this.total ? this.total.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFineReportParameters {
    startDate: Date;
    endDate: Date;
    fines: Product[];
    total: TotalPricing;
}

export enum Language {
    DUTCH = "DUTCH",
    ENGLISH = "ENGLISH",
}

export enum ReturnFileType {
    PDF = "PDF",
    TEX = "TEX",
}

export class FileSettings implements IFileSettings {
    name!: string;
    language!: Language;
    fileType!: ReturnFileType;
    stationery?: string;
    createdAt!: Date;

    constructor(data?: IFileSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.language = _data["language"];
            this.fileType = _data["fileType"];
            this.stationery = _data["stationery"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FileSettings {
        data = typeof data === 'object' ? data : {};
        let result = new FileSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["language"] = this.language;
        data["fileType"] = this.fileType;
        data["stationery"] = this.stationery;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IFileSettings {
    name: string;
    language: Language;
    fileType: ReturnFileType;
    stationery?: string;
    createdAt: Date;
}

export class FineRouteParams implements IFineRouteParams {
    params!: FineReportParameters;
    settings!: FileSettings;

    constructor(data?: IFineRouteParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.params = new FineReportParameters();
            this.settings = new FileSettings();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.params = _data["params"] ? FineReportParameters.fromJS(_data["params"]) : new FineReportParameters();
            this.settings = _data["settings"] ? FileSettings.fromJS(_data["settings"]) : new FileSettings();
        }
    }

    static fromJS(data: any): FineRouteParams {
        data = typeof data === 'object' ? data : {};
        let result = new FineRouteParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["params"] = this.params ? this.params.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFineRouteParams {
    params: FineReportParameters;
    settings: FileSettings;
}

export class Payout implements IPayout {
    bankAccountName!: string;
    bankAccountNumber!: string;
    amount!: number;
    reference!: string;
    date!: Date;
    debtorNumber!: string;

    constructor(data?: IPayout) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bankAccountName = _data["bankAccountName"];
            this.bankAccountNumber = _data["bankAccountNumber"];
            this.amount = _data["amount"];
            this.reference = _data["reference"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.debtorNumber = _data["debtorNumber"];
        }
    }

    static fromJS(data: any): Payout {
        data = typeof data === 'object' ? data : {};
        let result = new Payout();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankAccountName"] = this.bankAccountName;
        data["bankAccountNumber"] = this.bankAccountNumber;
        data["amount"] = this.amount;
        data["reference"] = this.reference;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["debtorNumber"] = this.debtorNumber;
        return data;
    }
}

export interface IPayout {
    bankAccountName: string;
    bankAccountNumber: string;
    amount: number;
    reference: string;
    date: Date;
    debtorNumber: string;
}

export class PayoutParameters implements IPayoutParameters {
    payout!: Payout;

    constructor(data?: IPayoutParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.payout = new Payout();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.payout = _data["payout"] ? Payout.fromJS(_data["payout"]) : new Payout();
        }
    }

    static fromJS(data: any): PayoutParameters {
        data = typeof data === 'object' ? data : {};
        let result = new PayoutParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["payout"] = this.payout ? this.payout.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPayoutParameters {
    payout: Payout;
}

export class PayoutRouteParams implements IPayoutRouteParams {
    params!: PayoutParameters;
    settings!: FileSettings;

    constructor(data?: IPayoutRouteParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.params = new PayoutParameters();
            this.settings = new FileSettings();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.params = _data["params"] ? PayoutParameters.fromJS(_data["params"]) : new PayoutParameters();
            this.settings = _data["settings"] ? FileSettings.fromJS(_data["settings"]) : new FileSettings();
        }
    }

    static fromJS(data: any): PayoutRouteParams {
        data = typeof data === 'object' ? data : {};
        let result = new PayoutRouteParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["params"] = this.params ? this.params.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPayoutRouteParams {
    params: PayoutParameters;
    settings: FileSettings;
}

export enum ContractType {
    Contract = "contract",
    Quote = "quote",
}

export class Identity implements IIdentity {
    firstName!: string;
    lastNamePreposition!: string;
    lastName!: string;
    fullName!: string;
    function?: string;

    constructor(data?: IIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastNamePreposition = _data["lastNamePreposition"];
            this.lastName = _data["lastName"];
            this.fullName = _data["fullName"];
            this.function = _data["function"];
        }
    }

    static fromJS(data: any): Identity {
        data = typeof data === 'object' ? data : {};
        let result = new Identity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastNamePreposition"] = this.lastNamePreposition;
        data["lastName"] = this.lastName;
        data["fullName"] = this.fullName;
        data["function"] = this.function;
        return data;
    }
}

export interface IIdentity {
    firstName: string;
    lastNamePreposition: string;
    lastName: string;
    fullName: string;
    function?: string;
}

export class Dates implements IDates {
    date!: Date;
    dueDate?: Date;
    dueDays?: number;
    startDate?: Date;
    endDate?: Date;

    constructor(data?: IDates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : <any>undefined;
            this.dueDays = _data["dueDays"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Dates {
        data = typeof data === 'object' ? data : {};
        let result = new Dates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>undefined;
        data["dueDays"] = this.dueDays;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IDates {
    date: Date;
    dueDate?: Date;
    dueDays?: number;
    startDate?: Date;
    endDate?: Date;
}

export class Company implements ICompany {
    name!: string;
    id?: string;

    constructor(data?: ICompany) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Company {
        data = typeof data === 'object' ? data : {};
        let result = new Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        return data;
    }
}

export interface ICompany {
    name: string;
    id?: string;
}

export class Address implements IAddress {
    street!: string;
    postalCode!: string;
    city!: string;
    country!: string;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.street = _data["street"];
            this.postalCode = _data["postalCode"];
            this.city = _data["city"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["street"] = this.street;
        data["postalCode"] = this.postalCode;
        data["city"] = this.city;
        data["country"] = this.country;
        return data;
    }
}

export interface IAddress {
    street: string;
    postalCode: string;
    city: string;
    country: string;
}

export class References implements IReferences {
    ourReference?: string;
    yourReference?: string;

    constructor(data?: IReferences) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ourReference = _data["ourReference"];
            this.yourReference = _data["yourReference"];
        }
    }

    static fromJS(data: any): References {
        data = typeof data === 'object' ? data : {};
        let result = new References();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ourReference"] = this.ourReference;
        data["yourReference"] = this.yourReference;
        return data;
    }
}

export interface IReferences {
    ourReference?: string;
    yourReference?: string;
}

export class ContractParameters implements IContractParameters {
    subject!: string;
    sender!: Identity;
    recipient!: Identity;
    dates!: Dates;
    company!: Company;
    address!: Address;
    reference?: References;
    products!: Product[];
    pricing!: TotalPricing;
    firstSignee!: Identity;
    secondSignee!: Identity;

    constructor(data?: IContractParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sender = new Identity();
            this.recipient = new Identity();
            this.dates = new Dates();
            this.company = new Company();
            this.address = new Address();
            this.products = [];
            this.pricing = new TotalPricing();
            this.firstSignee = new Identity();
            this.secondSignee = new Identity();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subject = _data["subject"];
            this.sender = _data["sender"] ? Identity.fromJS(_data["sender"]) : new Identity();
            this.recipient = _data["recipient"] ? Identity.fromJS(_data["recipient"]) : new Identity();
            this.dates = _data["dates"] ? Dates.fromJS(_data["dates"]) : new Dates();
            this.company = _data["company"] ? Company.fromJS(_data["company"]) : new Company();
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : new Address();
            this.reference = _data["reference"] ? References.fromJS(_data["reference"]) : <any>undefined;
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
            this.pricing = _data["pricing"] ? TotalPricing.fromJS(_data["pricing"]) : new TotalPricing();
            this.firstSignee = _data["firstSignee"] ? Identity.fromJS(_data["firstSignee"]) : new Identity();
            this.secondSignee = _data["secondSignee"] ? Identity.fromJS(_data["secondSignee"]) : new Identity();
        }
    }

    static fromJS(data: any): ContractParameters {
        data = typeof data === 'object' ? data : {};
        let result = new ContractParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subject"] = this.subject;
        data["sender"] = this.sender ? this.sender.toJSON() : <any>undefined;
        data["recipient"] = this.recipient ? this.recipient.toJSON() : <any>undefined;
        data["dates"] = this.dates ? this.dates.toJSON() : <any>undefined;
        data["company"] = this.company ? this.company.toJSON() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["reference"] = this.reference ? this.reference.toJSON() : <any>undefined;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        data["pricing"] = this.pricing ? this.pricing.toJSON() : <any>undefined;
        data["firstSignee"] = this.firstSignee ? this.firstSignee.toJSON() : <any>undefined;
        data["secondSignee"] = this.secondSignee ? this.secondSignee.toJSON() : <any>undefined;
        return data;
    }
}

export interface IContractParameters {
    subject: string;
    sender: Identity;
    recipient: Identity;
    dates: Dates;
    company: Company;
    address: Address;
    reference?: References;
    products: Product[];
    pricing: TotalPricing;
    firstSignee: Identity;
    secondSignee: Identity;
}

export class ContractRouteParams implements IContractRouteParams {
    params!: ContractParameters;
    settings!: FileSettings;

    constructor(data?: IContractRouteParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.params = new ContractParameters();
            this.settings = new FileSettings();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.params = _data["params"] ? ContractParameters.fromJS(_data["params"]) : new ContractParameters();
            this.settings = _data["settings"] ? FileSettings.fromJS(_data["settings"]) : new FileSettings();
        }
    }

    static fromJS(data: any): ContractRouteParams {
        data = typeof data === 'object' ? data : {};
        let result = new ContractRouteParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["params"] = this.params ? this.params.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IContractRouteParams {
    params: ContractParameters;
    settings: FileSettings;
}

export enum InvoiceType {
    Invoice = "invoice",
    Weeklysales = "weeklysales",
    Creditnota = "creditnota",
}

export class InvoiceReferences implements IInvoiceReferences {
    ourReference?: string;
    yourReference?: string;
    costCenter?: boolean;

    constructor(data?: IInvoiceReferences) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ourReference = _data["ourReference"];
            this.yourReference = _data["yourReference"];
            this.costCenter = _data["costCenter"];
        }
    }

    static fromJS(data: any): InvoiceReferences {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceReferences();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ourReference"] = this.ourReference;
        data["yourReference"] = this.yourReference;
        data["costCenter"] = this.costCenter;
        return data;
    }
}

export interface IInvoiceReferences {
    ourReference?: string;
    yourReference?: string;
    costCenter?: boolean;
}

/** From T, pick a set of properties whose keys are in the union K */
export class Reference__ implements IReference__ {
    products!: Product[];
    pricing!: TotalPricing;
    subject!: string;
    sender!: Identity;
    recipient!: Identity;
    dates!: Dates;
    company!: Company;
    address!: Address;

    [key: string]: any;

    constructor(data?: IReference__) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.products = [];
            this.pricing = new TotalPricing();
            this.sender = new Identity();
            this.recipient = new Identity();
            this.dates = new Dates();
            this.company = new Company();
            this.address = new Address();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
            this.pricing = _data["pricing"] ? TotalPricing.fromJS(_data["pricing"]) : new TotalPricing();
            this.subject = _data["subject"];
            this.sender = _data["sender"] ? Identity.fromJS(_data["sender"]) : new Identity();
            this.recipient = _data["recipient"] ? Identity.fromJS(_data["recipient"]) : new Identity();
            this.dates = _data["dates"] ? Dates.fromJS(_data["dates"]) : new Dates();
            this.company = _data["company"] ? Company.fromJS(_data["company"]) : new Company();
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : new Address();
        }
    }

    static fromJS(data: any): Reference__ {
        data = typeof data === 'object' ? data : {};
        let result = new Reference__();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        data["pricing"] = this.pricing ? this.pricing.toJSON() : <any>undefined;
        data["subject"] = this.subject;
        data["sender"] = this.sender ? this.sender.toJSON() : <any>undefined;
        data["recipient"] = this.recipient ? this.recipient.toJSON() : <any>undefined;
        data["dates"] = this.dates ? this.dates.toJSON() : <any>undefined;
        data["company"] = this.company ? this.company.toJSON() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        return data;
    }
}

/** From T, pick a set of properties whose keys are in the union K */
export interface IReference__ {
    products: Product[];
    pricing: TotalPricing;
    subject: string;
    sender: Identity;
    recipient: Identity;
    dates: Dates;
    company: Company;
    address: Address;

    [key: string]: any;
}

export class InvoiceParameters implements IInvoiceParameters {
    products!: Product[];
    pricing!: TotalPricing;
    subject!: string;
    sender!: Identity;
    recipient!: Identity;
    dates!: Dates;
    company!: Company;
    address!: Address;
    summarizedProducts?: Product[];
    reference?: InvoiceReferences;

    constructor(data?: IInvoiceParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.products = [];
            this.pricing = new TotalPricing();
            this.sender = new Identity();
            this.recipient = new Identity();
            this.dates = new Dates();
            this.company = new Company();
            this.address = new Address();
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
            this.pricing = _data["pricing"] ? TotalPricing.fromJS(_data["pricing"]) : new TotalPricing();
            this.subject = _data["subject"];
            this.sender = _data["sender"] ? Identity.fromJS(_data["sender"]) : new Identity();
            this.recipient = _data["recipient"] ? Identity.fromJS(_data["recipient"]) : new Identity();
            this.dates = _data["dates"] ? Dates.fromJS(_data["dates"]) : new Dates();
            this.company = _data["company"] ? Company.fromJS(_data["company"]) : new Company();
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : new Address();
            if (Array.isArray(_data["summarizedProducts"])) {
                this.summarizedProducts = [] as any;
                for (let item of _data["summarizedProducts"])
                    this.summarizedProducts!.push(Product.fromJS(item));
            }
            this.reference = _data["reference"] ? InvoiceReferences.fromJS(_data["reference"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InvoiceParameters {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        data["pricing"] = this.pricing ? this.pricing.toJSON() : <any>undefined;
        data["subject"] = this.subject;
        data["sender"] = this.sender ? this.sender.toJSON() : <any>undefined;
        data["recipient"] = this.recipient ? this.recipient.toJSON() : <any>undefined;
        data["dates"] = this.dates ? this.dates.toJSON() : <any>undefined;
        data["company"] = this.company ? this.company.toJSON() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        if (Array.isArray(this.summarizedProducts)) {
            data["summarizedProducts"] = [];
            for (let item of this.summarizedProducts)
                data["summarizedProducts"].push(item.toJSON());
        }
        data["reference"] = this.reference ? this.reference.toJSON() : <any>undefined;
        return data;
    }
}

export interface IInvoiceParameters {
    products: Product[];
    pricing: TotalPricing;
    subject: string;
    sender: Identity;
    recipient: Identity;
    dates: Dates;
    company: Company;
    address: Address;
    summarizedProducts?: Product[];
    reference?: InvoiceReferences;
}

export class InvoiceRouteParams implements IInvoiceRouteParams {
    params!: InvoiceParameters;
    settings!: FileSettings;

    constructor(data?: IInvoiceRouteParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.params = new InvoiceParameters();
            this.settings = new FileSettings();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.params = _data["params"] ? InvoiceParameters.fromJS(_data["params"]) : new InvoiceParameters();
            this.settings = _data["settings"] ? FileSettings.fromJS(_data["settings"]) : new FileSettings();
        }
    }

    static fromJS(data: any): InvoiceRouteParams {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceRouteParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["params"] = this.params ? this.params.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IInvoiceRouteParams {
    params: InvoiceParameters;
    settings: FileSettings;
}

export enum ValidateErrorJSONMessage {
    Validation_failed = "Validation failed",
}

export enum InternalErrorMessage {
    Internal_Server_Error = "Internal Server Error",
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}